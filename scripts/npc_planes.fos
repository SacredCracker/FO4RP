// Author: cvet
// Export functions
#include "_macros.fos"

bool AddMiscPlane( Critter& npc, uint priority, uint waitSecond, string@ funcName )
{
	if( npc.IsPlayer() ) return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_MISC;
    plane.Priority = ( priority == 0 ? AI_PLANE_MISC_PRIORITY : priority );
    plane.Misc_WaitSecond = waitSecond;
    if( valid( funcName ) && not plane.Misc_SetScript( funcName ) )
    {
        Log( "Set script <" + funcName + "> fail" );
        return false;
    }
    return npc.AddPlane( plane );
}

bool AddWalkPlane( Critter& npc, uint entire, uint cut, bool run )
{
	if( npc.IsPlayer() ) return false;

    uint16 hX = 0, hY = 0;
    Map@   map = npc.GetMap();
    if( valid( map ) && map.GetEntireCoords( entire, 0, hX, hY ) )
    {
        return AddWalkPlane( npc, 0, hX, hY, 6, run, cut );
    }
    return false;
}

bool AddWalkPlane( Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut )
{
	if( npc.IsPlayer() ) return false;

    if( not npc.IsCanWalk() )
        return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_WALK;
    plane.Priority = ( priority == 0 ? AI_PLANE_WALK_PRIORITY : priority );
    plane.Walk_HexX = hexX;
    plane.Walk_HexY = hexY;
    plane.Walk_Dir = dir;
    plane.Run = run;
    plane.Walk_Cut = cut;
    return npc.AddPlane( plane );
}

bool AddWalkPlane( Critter& npc, uint priority, int identifier, uint identifierExt, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut )
{
	if( npc.IsPlayer() ) return false;

    if( not npc.IsCanWalk() )
        return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_WALK;
    plane.Priority = ( priority == 0 ? AI_PLANE_WALK_PRIORITY : priority );
    plane.Identifier = identifier;
    plane.IdentifierExt = identifierExt;
    plane.Walk_HexX = hexX;
    plane.Walk_HexY = hexY;
    plane.Walk_Dir = dir;
    plane.Run = run;
    plane.Walk_Cut = cut;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, Critter& target )
{
	if( npc.IsPlayer() ) return false;
	
    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = __DeadHitPoints * 0.5;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = true;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, uint critId )
{
	if( npc.IsPlayer() ) return false;

    Critter@ target = GetCritter( critId );
    if( not valid( target ) )
    {
        Log( "Target not found." );
        return false;
    }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = __DeadHitPoints * 0.5;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = true;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, Critter& target, int minHp )
{
	if( npc.IsPlayer() ) return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = minHp;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = true;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, uint critId, int minHp )
{
	if( npc.IsPlayer() ) return false;

    Critter@ target = GetCritter( critId );
    if( not valid( target ) )
    {
        Log( "Target not found." );
        return false;
    }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = minHp;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = true;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, Critter& target, bool run )
{
	if( npc.IsPlayer() ) return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = __DeadHitPoints * 0.5;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = run;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, uint critId, bool run )
{
	if( npc.IsPlayer() ) return false;

    Critter@ target = GetCritter( critId );
    if( not valid( target ) )
    {
        Log( "Target not found." );
        return false;
    }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = __DeadHitPoints * 0.5;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = run;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, Critter& target, int minHp, bool run )
{
	if( npc.IsPlayer() ) return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = minHp;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = run;
    return npc.AddPlane( plane );
}

bool AddAttackPlane( Critter& npc, uint priority, uint critId, int minHp, bool run )
{
	if( npc.IsPlayer() ) return false;

    Critter@ target = GetCritter( critId );
    if( not valid( target ) )
    {
        Log( "Target not found." );
        return false;
    }

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_ATTACK;
    plane.Priority = ( priority == 0 ? AI_PLANE_ATTACK_PRIORITY : priority );
    plane.Attack_TargId = target.Id;
    plane.Attack_MinHp = minHp;
    plane.Attack_IsGag = false;
    plane.Attack_GagHexX = 0;
    plane.Attack_GagHexY = 0;
    plane.Attack_LastHexX = npc.HexX;//target.HexX;
    plane.Attack_LastHexY = npc.HexY;//target.HexY;
    plane.Run = run;
    return npc.AddPlane( plane );
}

bool AddPickPlane( Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint16 protoId, uint useItemId, bool toOpen )
{
	if( npc.IsPlayer() ) return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_PICK;
    plane.Priority = ( priority == 0 ? AI_PLANE_PICK_PRIORITY : priority );
    plane.Pick_HexX = hexX;
    plane.Pick_HexY = hexY;
    plane.Pick_Pid = protoId;
    plane.Pick_UseItemId = useItemId;
    plane.Pick_ToOpen = toOpen;
    plane.Run = false;
    return npc.AddPlane( plane );
}

bool AddPickPlane( Critter& npc, uint priority, Item@ item, uint useItemId, bool toOpen )
{
	if( npc.IsPlayer() ) return false;

    NpcPlane@ plane = CreatePlane();
    plane.Type = AI_PLANE_PICK;
    plane.Priority = ( priority == 0 ? AI_PLANE_PICK_PRIORITY : priority );
    plane.Pick_HexX = item.HexX;
    plane.Pick_HexY = item.HexY;
    plane.Pick_Pid = item.GetProtoId();
    plane.Pick_UseItemId = useItemId;
    plane.Pick_ToOpen = toOpen;
    plane.Run = false;
    return npc.AddPlane( plane );
}

uint EraseAttackPlane( Critter& npc, Critter& target )
{
	if( npc.IsPlayer() ) return 0;

    return EraseAttackPlane( npc, target.Id );
}

uint EraseAttackPlane( Critter& npc, uint critId )
{
	if( npc.IsPlayer() ) return 0;

    NpcPlane@[] planes;
    uint count = npc.GetPlanes( planes );
    if( count == 0 )
        return 0;

    uint erased = 0;
    for( uint i = 0; i < count; i++ )
    {
        if( planes[ i ].Attack_TargId == critId && npc.ErasePlane( i - erased ) )
            erased++;
    }

    return erased;
}
