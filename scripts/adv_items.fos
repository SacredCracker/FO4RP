// #include "_defines.fos"
#include "_macros.fos"
#include "_colors.fos"
// #include "math.fos"

import bool isGM( Critter& player ) from "gm";
import void AskCooking( Critter& cr ) from "cooking";
import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId ) from "combat"; // Export
import void SayLog( Map@ map, string message ) from "general_unsafe";

#define PID_FIREBARREL    ( 7900 )
#define PID_FIREPLACE     ( 7901 )
#define PID_WELL_1		  ( 7902 )
#define PID_WELL_2		  ( 7903 ) //Нужно поправить описание!
#define PID_WELL_3		  ( 7904 ) //У него спрайт кактуса!
#define PID_CACTUS_1      ( 7905 )
#define PID_CACTUS_2      ( 7906 ) //У него спрайт генератора!
#define PID_POWER_GEN     ( 7907 ) //У него нет спрайта!
#define PID_LIGHT_ENV     ( 7908 ) // val1 = lightColor, val2 = radius

int[][] groups = { {}, { PID_POWER_GEN }, { PID_FIREBARREL }, { PID_FIREPLACE, 286 }, { PID_WELL_1, PID_WELL_2, PID_WELL_3 }, { PID_CACTUS_1, PID_CACTUS_2 } };
string[] group_descriptions = { "ERROR", "генераторе", "бочке", "костре", "колодце", "кактусе"};
#define TYPE_NONE        ( 0 )
#define TYPE_POWERGEN    ( 1 )
#define TYPE_FIREBARREL  ( 2 )
#define TYPE_FIREPIT     ( 3 )
#define TYPE_WELL 		 ( 4 )
#define TYPE_CACTUS 	 ( 5 )

int FindGroup(Item& item) {
    int PID = item.GetProtoId();
	for( uint i = 0, iEnd = groups.length(); i < iEnd; i++ )
		if( groups[i].find(PID) != -1 ) return i;
	return TYPE_NONE;
}

#define STATE Val0
#define MAX Val1
#define VAL Val2
#define EVENT Val3
#define BREAK Val4
#define TYPE Val5

#define WATER_FILL_TIME __FullSecond + REAL_MINUTE( Random( 15, 45 ) )
void _InitItem( Item& item, bool firstTime )
{
	int key = FindGroup(item);
    if( key > TYPE_NONE ) 
	{
        if( key != TYPE_FIREPIT )
			ChangeFrame( item, 0 );

        item.STATE = 0;
		if( key == TYPE_WELL || key == TYPE_CACTUS ) {
			item.MAX = ( key == TYPE_CACTUS ? Random(10,15) : Random(25,75) );
			item.VAL = item.MAX;
		}
		else 
		{
			item.MAX = 10;
			item.VAL = 0;
		}
		item.EVENT = 0;
		if(key == TYPE_WELL) {
			uint[] values = { item.Id };
			item.EVENT = CreateTimeEvent( __FullSecond + WATER_FILL_TIME, "e_WellCharge", values, false );
		}
		item.BREAK = 0;
		item.TYPE = key;
		item.SetEvent( ITEM_EVENT_SKILL, "e_Skill" );
        item.SetEvent( ITEM_EVENT_USE_ON_ME, key == TYPE_CACTUS ? "e_Cut" : "e_Repair" );
    }
}

bool e_Skill( Item& item, Critter& cr, int skill ) 
{
	if( item.GetProtoId() == 286 )
		return false; //Игнор дров.
	
	if(item.STATE != 0 ) {
		cr.Say(SAY_NETMSG, "Предмет требует починки!" );
		return true;
	}
	string description = group_descriptions[item.TYPE];
    switch( skill ) 
	{
		case SK_SCIENCE:
			cr.Say( SAY_NETMSG, "В " + description + " осталось " + item.VAL + "." );
			return true;
		case SKILL_PICK_ON_GROUND:
		switch(item.TYPE) {
			case(TYPE_FIREBARREL):
			case(TYPE_FIREPIT):
				if( item.VAL > 0 ) { AskCooking( cr ); return true; }
				else { cr.Say(SAY_NETMSG, "Огонь погас, используйте древесину и зажигалку."); item.STATE = 1; }
				return true;
			//case(TYPE_CACTUS):
			case(TYPE_WELL):
				if( item.VAL > 0 ) return ShowMenuWater( cr, item );
				else { 
					cr.Say(SAY_NETMSG, "В " + description + " почти нет воды. Подождите часок-другой или поработайте лопатой."); 
					item.STATE = 3;
				}
				return true;
			default: break;
		}
    }
    return false;
}

bool ShowMenuWater(Critter& cr, Item& item) {
	if( item.VAL <= 0 ) { cr.Say(SAY_NETMSG, "В колодце кончилась вода. Подождите часок-другой или поработайте лопатой."); item.STATE = 3; return true; }
	cr.ShowScreen( SCREEN_DIALOGBOX, 1, "adv_items@answer_WATER" );
	cr.StatBase[ST_VAR7] = item.Id;
	cr.Say( SAY_DIALOGBOX_TEXT, "В " + group_descriptions[item.TYPE] + " осталось " + item.VAL + "." );
	cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "набрать воды" );
	return true;
}

int[] BottlePIDs_before = { PID_BOTTLE_GLASS, PID_BOTTLE_EMPTY };
int[] BottlePIDs_after = { PID_GLASS_BOTTLE_FULL, PID_BOTTLE_FULL };
void answer_WATER( Critter& cr, uint answerI, string& answerS )
{
    if( answerI == 0 ) {
		Item@ hand = _CritGetItemHand( cr );
		if(!valid(hand)) { cr.Say( SAY_NETMSG, "Возьмите пустую тару в руки!" ); return; }
		int n = BottlePIDs_before.find( hand.GetProtoId() );
		if(n == -1) { cr.Say( SAY_NETMSG, "Эта тара не подходит!" ); return; }
		if( cr.Timeout[ TO_SK_REPAIR ] > 0 && !isGM(cr) ) {
			cr.Say( SAY_NETMSG, "Вы слишком устали, дайте отдых рукам." ); return; 
		}
		Map@ map = cr.GetMap();
		if(!valid(map)) { Log("Вызов с глобала!"); return; }
		Item@ source = map.GetItem(cr.StatBase[ST_VAR7]);
		if(!valid(source)) { Log("Потеря указателя на предмет!"); return; }
		/*
        if((cr.Stat[ST_LUCK]-5) * 5 + 
		   (cr.Stat[ST_AGILITY]-5) * 3 + 
		   (cr.Stat[ST_INTELLECT]-5) * 3 + 
		   (cr.Stat[ST_PERCEPTION]-5) * 2 -
		   (cr.Stat[ST_STRENGTH]-5) * 5 - 
		   (cr.Stat[ST_ENDURANCE]-5) * 3 < 0)
		{
			int rand = Random( 1, 100 );
			if(rand > 90)       { source.STATE = 3; cr.Say( SAY_EMOTE, "Случайно выбивает лебёдку и роняет контрукцию в колодец" ); return;}
			else if(rand > 50 ) { source.STATE = 2; cr.Say( SAY_EMOTE, "Случайно ломает механизм лебёдки" ); return;}
			else if(rand > 10 ) { source.STATE = 1; cr.Say( SAY_EMOTE, "Случайно рвёт верёвку" ); return;}
		}
		*/
		source.VAL--;
		_SubItem(hand, 1);
		_CritAddItem( cr, BottlePIDs_after[n], 1 );
		cr.Say( SAY_EMOTE, "набирает воду" );
		cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + /*(11 - cr.Stat[ ST_ENDURANCE ] )*/ 5 * REAL_SECOND( 3 );
		cr.AddTimeEvent( "main@cte_Tired", 5 * REAL_SECOND( 3 ), CTE_TIRED, 0 );
		ShowMenuWater(cr, source);
	}
}

#define CACTUS_REST_TIME __FullSecond + REAL_MINUTE( Random( 15, 45 ) )
#define CACTUS_WATERING_TIME __FullSecond + REAL_MINUTE( Random( 1, 3 ) )
int[] CactusCutting_tools = { PID_KNIFE, PID_AXE, PID_COMBAT_KNIFE, PID_THROWING_KNIFE, PID_LIL_JESUS_WEAPON, 
								PID_REVKNIFE1, PID_REVKNIFE2, PID_SHIV, PID_SWITCHBLADE, PID_WAKIZASHI_BLADE };
bool e_Cut( Item& item, Critter& cr, Item@ usedItem )
{
	if( item.VAL == 0 ) {
		cr.Say( SAY_NETMSG, "Этот кактус полностью выжат, ему потребуется около получаса на восстановление." );
		uint[] values = { item.Id };
		item.EVENT = CreateTimeEvent( __FullSecond + CACTUS_REST_TIME, "e_CactusCharge", values, false );
		return true;
	}
	if( cr.Timeout[ TO_SK_REPAIR ] > 0 && !isGM(cr) ) {
		cr.Say( SAY_NETMSG, "Вы слишком устали, дайте отдых рукам." ); return true; 
	}
	if( !valid(usedItem) || CactusCutting_tools.find(usedItem.GetProtoId()) == -1 ) {
		cr.Say( SAY_NETMSG, "Что бы извлечь из кактуса влагу, вам потребуется использовать любой инструмент из списка:" );
		for(uint i = 0, iEnd = CactusCutting_tools.length(); i < iEnd; i++)
			cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM,  CactusCutting_tools[i] * 100 );
		return true;
	}
	Item@ hand = _CritGetItemHand( cr );
	if(!valid(hand)) { cr.Say( SAY_NETMSG, "Возьмите пустую тару в руки!" ); return true; }
	int n = BottlePIDs_before.find( hand.GetProtoId() );
	if(n == -1) { cr.Say( SAY_NETMSG, "Эта тара не подходит!" ); return true; }
	_SubItem(hand, 1);
	_CritAddItem( cr, BottlePIDs_after[n], 1 );
	cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + /*(11 - cr.Stat[ ST_ENDURANCE ] )*/ 1 * REAL_SECOND( 30 );
	cr.AddTimeEvent( "main@cte_Tired", 1 * REAL_SECOND( 30 ), CTE_TIRED, 0 );
	cr.Say( SAY_EMOTE, "набирает воду" );
	return false;
}

#define WELL_BROKEN_ROPE  ( 1 )
#define WELL_BROKEN_WHEEL ( 2 )
#define WELL_BROKEN_SHAFT ( 3 )
#define FIRE_BURNING_TIME REAL_SECOND( Random( 4, 10 ) )
int[][] Repairing_resources =  {{ PID_ROPE, PID_CRAFT_M_STEL, PID_FIREWOOD }, {PID_FIREWOOD}};
int[][] Repairing_tools =      {{ PID_MULTI_TOOL, PID_SUPER_TOOL_KIT, PID_SHOVEL }, {PID_LIGHTER}};
int[][] Repairing_iterations = {{ 1, 2, 3 }, {0}};
//item.SetEvent( ITEM_EVENT_SKILL, "e_BrokenItem" );

uint[] firables = { 
	//Изделия из древесины:
	PID_SIGN, PID_FIREWOOD, PID_WOOD_PART, PID_SHARPENED_POLE, PID_CLUB, PID_WOOD_PLANK, PID_WOOD_PLANK2,
	//Перегной и фермерские угодья:
	PID_SHIT_BIG, PID_SHIT_SMALL, 1601, 1602, 1603, 1604, 1611, 1612, 1613, 1614, 1621, 1622, 1623, 1624, 1625
	}; 
uint[] firesources = { PID_LIGHTER, PID_FIREPLACE };
uint[] ashes = { PID_ASHES_1, PID_ASHES_2, PID_ASHES_3 };

//import bool FireUp( Item& item, uint pid ) from "adv_items";
bool FireUp( Item& item, uint pid ) //exported
{
	return FireUp( item, pid, 2 );
}

//import bool FireUp( Item& item, uint pid, int strength ) from "adv_items";
bool FireUp( Item& item, uint pid, int strength ) //exported
{
	//Если это не попытка разжечь угли жигой - фейл. Защита от повторного возгорания пепелища.
	if( pid != PID_LIGHTER && ashes.find( item.GetProtoId() ) != -1 ) return false;
	else
	{
		if( firesources.find( pid ) == -1 ) return false;
		if( firables.find( item.GetProtoId() ) == -1 ) return false;
	}
	
	Map@ map = GetMap( item.MapId );
	if(!valid(map)) return false;
	Item@ fire = map.AddItem( item.HexX, item.HexY, PID_FIREPLACE, 1 );
	if( valid( fire ) )
		DeleteItem( item );
	else
	{
		@fire = item;
		fire.ChangeProto(PID_FIREPLACE);
	}
	
	fire.SetScript( "_InitItem" );
	LightControl( fire, true, 50, 5 );

	fire.VAL = strength;
	fire.TYPE = TYPE_FIREPIT; 
	SETFLAG( fire.Flags, ITEM_HIDDEN );
	SETFLAG( fire.Flags, ITEM_NO_HIGHLIGHT );
	fire.Update();

	uint[] values = { fire.Id, 0 };
	fire.EVENT = CreateTimeEvent( __FullSecond + REAL_SECOND(2), "e_FireBurn", values, true );
	SayLog( map, " [Возгорание в координатах (" + fire.HexX + ", " + fire.HexY + " )]" ); 
	return true;
}

//import bool spawnFire( Map@ map, int x, int y ) from "adv_items";
bool spawnFire( Map@ map, int x, int y ) //exported
{
	if(!valid(map)) return false;
	
	if( !map.IsHexPassed( x, y ) )
		return false;
	
	Item@[] heated;	
	map.GetItems( x, y, heated );
	
	for( uint i = 0; i < heated.length(); i++ )
		if( heated[i].GetProtoId() == PID_FIREPLACE )
			return false;
	
	Item@ fire = map.AddItem( x, y, PID_FIREPLACE, 1 );
	if( !valid( fire ) ) return false;

	fire.SetScript( "_InitItem" );
	LightControl( fire, true, 50, 5 );

	fire.VAL = 1;
	fire.TYPE = TYPE_FIREPIT; 
	SETFLAG( fire.Flags, ITEM_HIDDEN );
	SETFLAG( fire.Flags, ITEM_NO_HIGHLIGHT );
	fire.Update();

	uint[] values = { fire.Id, 0 };
	fire.EVENT = CreateTimeEvent( __FullSecond + REAL_SECOND(2), "e_FireBurn", values, true );
	SayLog( map, " [Возгорание в координатах (" + fire.HexX + ", " + fire.HexY + " )]" ); 
	return true;
}

//import bool e_Repair( Item& item, Critter& cr, Item@ usedItem ) from "adv_items";
bool e_Repair( Item& item, Critter& cr, Item@ usedItem )
{
	if(item.STATE == 0 && !valid(usedItem)) return e_Skill( item, cr, SKILL_PICK_ON_GROUND ); 
	if( cr.Timeout[ TO_SK_REPAIR ] > 0 && !isGM(cr) ) {
		cr.Say( SAY_NETMSG, "Вы слишком устали, дайте отдых рукам." ); return true; 
	}

	uint used = ( valid( usedItem ) ? usedItem.GetProtoId() : 0 );
	uint lighter = ( used == PID_FLINT ? PID_LIGHTER : used );
	
	if( FireUp( item, lighter ) )
	{
		if( used == PID_FLINT && Random( 1, 300 ) > cr.Skill[SK_OUTDOORSMAN] )
		{
			_SubItem( usedItem, 1 );
			cr.Say( SAY_NETMSG, "Вы сточили поджиг." );
		}
		SayLog( cr.GetMap(), cr.Name + " " + cr.Id + " **разжигает огонь** " ); 
		return true;
	}

	if( ashes.find( item.GetProtoId() ) != -1 && valid( usedItem ) )
	{
		if( usedItem.GetProtoId() == PID_FIREWOOD ) {
			if( item.VAL < item.MAX ) {
				cr.Say( SAY_EMOTE, "подкладывает дрова" );
				_SubItem( usedItem, 1 );
				item.VAL++;
			} else cr.Say( SAY_NETMSG, "Дрова уже некуда класть, дайте этим прогореть!" );
			return true;
		}
		if( usedItem.GetProtoId() == PID_SHOVEL )
		{
			cr.Say( SAY_EMOTE_ON_HEAD, "Убирает золу." );
			DeleteItem(item);
			return true;
		}
	}
	
	int n = -1;
	bool initFire = false;
    switch( item.TYPE ) {
		case(TYPE_NONE):  break;
		case(TYPE_WELL): n = 0; break;
		case(TYPE_FIREBARREL):
		case(TYPE_FIREPIT): n = 1; initFire = true; break;
		default: break;
    }
	if(n == -1) return false;
	if( initFire && valid(usedItem) ) {
		if( usedItem.GetProtoId() == PID_CROWBAR) {
			int count = item.VAL * 8 / 10;
			if(count > 0 ) 
			{
				_CritAddItem( cr, PID_FIREWOOD, count );
				cr.Say( SAY_EMOTE, "выгребает древесину" );
			}
			item.VAL = 0;
			uint[] values = { item.Id, 0 };
			item.EVENT = CreateTimeEvent( __FullSecond, "e_FireBurn", values, true );
			return true;
		}
		int pid = BottlePIDs_after.find(usedItem.GetProtoId());
		if( pid != -1 ) {
			cr.Say( SAY_EMOTE, "тушит огонь" );
			_SubItem(usedItem, 1);
			_CritAddItem(cr, BottlePIDs_before[pid], 1);
			EraseTimeEvent(item.EVENT);
			item.EVENT = 0;
			item.STATE = 1;

			SETFLAG( item.Flags, ITEM_NO_HIGHLIGHT );
			item.Update();
			LightControl( item, false, 50, 5 );

			Map@ map = GetMap( item.MapId );
			if(valid(map)) map.SetText(item.HexX,item.HexY,COLOR_GRAY,":шипение пара:");
			SayLog( map, cr.Name + " " + cr.Id + " **тушит огонь** " ); 
			return true;
		}
	}
	
	Item@ hand = _CritGetItemHand( cr );
	uint p = CLAMP( item.STATE - 1, 0, Repairing_resources[n].length() - 1 );

	if( !valid(usedItem) || usedItem.GetProtoId() != Repairing_resources[n][p] ) 
		return NeededItem( cr, Repairing_resources[n][p] );
	
	if(!valid(hand)) { cr.Say( SAY_NETMSG, "Что бы приступить к ремонту, возьмите инструмент в руки!" ); 
		return NeededItem( cr, Repairing_tools[n][p] ); }
		
	if( hand.GetProtoId() != Repairing_tools[n][p] ) 
		return NeededItem( cr, Repairing_tools[n][p] );
	
	cr.Say( SAY_EMOTE, initFire ? "разжигает огонь" : "ремонтирует" );
	cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + ( 11 - cr.Stat[ ST_ENDURANCE ] ) * REAL_SECOND( 30 );
	if(item.BREAK < Repairing_iterations[n][p] ) { 
		item.BREAK++;  
		cr.Say( SAY_NETMSG, "Осталось ещё " + ( Repairing_iterations[n][p] - item.BREAK + 1 ) + " итераций." ); 
		return true; 
	} else {
		item.VAL += initFire ? 1 : Repairing_iterations[n][p] * 3;
		item.STATE = 0; 
		item.BREAK = 0;
		_SubItem(usedItem, 1);
		if(initFire) {
			if( ashes.find( item.GetProtoId() ) != -1 )
			{
				item.ChangeProto(PID_FIREPLACE);
				item.SetScript( "_InitItem" );

			}
			item.VAL = 2;
			item.TYPE = TYPE_FIREPIT; 
			SETFLAG( item.Flags, ITEM_NO_HIGHLIGHT );
			SETFLAG( item.Flags, ITEM_HIDDEN );
			item.Update();
			
			uint[] values = { item.Id, 0 };
			item.EVENT = CreateTimeEvent( __FullSecond + REAL_SECOND(2), "e_FireBurn", values, true );
			LightControl( item, true, 50, 5 );
			SayLog( cr.GetMap(), cr.Name + " " + cr.Id + " **разжигает огонь** " ); 
		}
		return e_Skill( item, cr, SKILL_PICK_ON_GROUND );
	}
	return false;
}

void e_Hot(Item& item, Critter& crit, bool entered, uint8 dir) {
	if(entered) crit.AddTimeEvent( "cte_Hot", 0, CTE_DYSPNEA, 0 );
	else crit.EraseTimeEvents(CTE_DYSPNEA);
}

uint cte_Hot( Critter& cr, int identifier, uint& rate )
{
	if( cr.IsDead() ) return 0;
	cr.ParamBase[CR_TEMP]++;
	InjureCritter( cr, cr.ParamBase[CR_TEMP], DAMAGE_FIRE, 0, 0 );
	rate++;
	return REAL_SECOND( 1 );
}

uint e_FireBurn( uint[] @ values )
{
	if( !valid( values ) || values.length() != 2 ) return 0;
	
    Item@ item = GetItem( values[ 0 ] );
	if( !valid(item) ) return 0;

	if( FLAG( item.Flags, ITEM_HIDDEN ) )
	{
		UNSETFLAG( item.Flags, ITEM_HIDDEN );
		item.Update();
	}
	
	if( item.VAL > 0 ) 
	{
        values[1]++;
		if( values[1] >= 60 ) 
		{ 
			values[1] = 0; 
			item.VAL -= Random( 0, 1); 
		}
		
		if( Random(0,1) == 0 ) 
		{
			Map@ map = GetMap( item.MapId );
			if( valid(map) )
			{
				uint16 hx = item.HexX, hy = item.HexY;
				map.SetText( hx, hy, COLOR_LGRAY, ":треск огня:" );
				
				Item@[] heated;
				for( uint i = 0; i < 6; i++ ) 
				{
					hx = item.HexX; hy = item.HexY;
					map.MoveHexByDir( hx, hy, i, 1 );
					map.GetItems( hx, hy, heated );
				}
				
				for( uint i = 0; i < heated.length(); i++ )
					FireUp( heated[i], PID_FIREPLACE, 1 );
			}
		}
		
        return FIRE_BURNING_TIME;
    }
	
	LightControl( item, false, 50, 5 );
	if( item.TYPE == TYPE_FIREPIT )
	{
		//DeleteItem(item);
		item.ChangeProto( ashes[ Random( 0, ashes.length() - 1 ) ] );
		UNSETFLAG( item.Flags, ITEM_SHOW_ANIM );
		UNSETFLAG( item.Flags, ITEM_CAN_PICKUP );
		item.Update();
		return 0;
	}
	
	item.STATE = 1;
	EraseTimeEvent( item.EVENT );
	item.EVENT = 0;
    return 0;
}

void ChangeFrame( Item& item, uint8 frame )
{
	// Log( "" + item.AnimStayBegin );
    item.AnimStayBegin      = frame;
	// Log( "" + item.AnimStayEnd );
    item.AnimStayEnd        = frame;
	// Log( "" + item.AnimShowBegin );
    item.AnimShowBegin      = frame;
	// Log( "" + item.AnimShowEnd );
    item.AnimShowEnd        = frame;
	// Log( "" + item.AnimHideBegin );
    item.AnimHideBegin      = frame;
	// Log( "" + item.AnimHideEnd );
    item.AnimHideEnd        = frame;
    item.Update();
    return;
}

bool NeededItem( Critter& cr, uint16 protoId )
{
    cr.Say( SAY_NETMSG, "Требуется:" );
    cr.SayMsg( SAY_NETMSG, TEXTMSG_ITEM, protoId * 100 );
	return true;
}
 
void LightControl( Item& item, bool onOff, uint intensity, uint8 radius )
{
	ChangeFrame( item, onOff ? 1 : 0 );
	item.SetEvent( ITEM_EVENT_WALK, onOff ? "e_Hot" : null );
    item.LightIntensity = intensity;
	//item.LightRadius = radius;
    item.LightColor = LightColor( onOff ? 1 : 0 );
    item.Update();
}

uint LightColor( int color )
{
    switch( color )
    {
    case 1:
        color = 9999666;
        break;                         
    default:
        color = 0;
        break;
    }
    return color;
}

void addlight( Critter& player, int param0, int param1, int param2 )
{
    Map @ map = player.GetMap();
    uint16 hexX = 0, hexY = 0;
    for( uint8 i = 240; i < 242; i++ )
    {
        if( not map.GetEntireCoords( i, 0, hexX, hexY ) )
        {
            Log( "entire num " + i + " not found(light env)" );
            return;
        }
        Log( "hexX = " + hexX + " hexY = " + hexY );
        Item@ light = map.AddItem( hexX, hexY, PID_LIGHT_ENV, 1 );
        Log( "light" + ( valid( light ) ? " " : " not ") + "valid" );
    }
}


uint e_WellCharge( uint[] @ values ) 
{
	Item @ well = GetItem( values[ 0 ] );
	well.MAX = Random(25,75);
	well.VAL += CLAMP(Random(25,well.MAX), 0, well.MAX);
	Map@ map = GetMap( well.MapId );
	if(valid(map)) map.SetText(well.HexX,well.HexY,COLOR_GRAY,":журчание воды:");
	well.STATE = 0;
	return WATER_FILL_TIME;
}
uint e_CactusCharge( uint[] @ values )
{
    Item @ cactus = GetItem( values[ 0 ] );
    if( cactus.MAX >= cactus.VAL )
    {
        cactus.VAL += Random( 0, 1 ) + Random( 0, 1 ) + Random( 0, 1 );
        return CACTUS_WATERING_TIME;
    }
	cactus.EVENT = 0;
    return 0;
}