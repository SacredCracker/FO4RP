#include "_macros.fos"
#include "_global_events.fos"

import void DropDrugEffects( Critter& cr ) from "drugs";
import void DropPoison( Critter& cr ) from "poison";
import void DropRadiation( Critter& cr ) from "radiation";

import void DontPickItUp( Critter& cr ) from "arcade_menu";
// import void SkinMenu(Critter@ cr) from "arcade_menu";
import void ArcadeDead( Critter& cr, uint8 time ) from "arcade_menu";
import void StartArcadeMenu( Critter@ cr ) from "arcade_menu";
import void ShowHiveButtons( Critter& cr ) from "arcade_menu";

import void PlayMusic(Critter& cr, string& musicName, uint pos, uint repeat) from "media";

// import bool ChangeWildness(uint i, int delta) from "globalmap_group";
import bool ChangeWildness( uint16 x, uint16 y, int delta ) from "globalmap_group";
// import uint GetWildness(uint16 x, uint16 y) from "globalmap_group";
import void ChangeMonsterCount( Critter& cr, bool increase ) from "globalmap_group";
import void ChangeMonsterCount( Critter& cr, uint8 count, bool increase ) from "globalmap_group";
import void GlobalCellPopulation() from "globalmap_group";
import void GlobalCellSpawnLo() from "globalmap_group";

import uint GetAllPlayers( Critter@[]& crs ) from "manager";
//
import void Item_SetFrame( Item& item, uint8 frame ) from "item";

import void ObjectTimeLoop() from "map_sutter_objects";
import void RottenFood( Critter& cr ) from "rotting";

import void DypsneaCr( Critter& cr ) from "globalmap_group";

import bool isGM( Critter& player ) from "gm";

// interface GameMode
// {
// void LeadIn(Critter& cr);
// void Dead(Critter& cr);
// }


// LVAR_GAME_ADV_ACTIVATION_TIME
// LVAR_GAME_ADV_ACTIVATION_AUTHOR

bool SwitchGameMode( Critter& cr, int mode )
{
    if( cr.Param[ QST_GAMEMODE ] != GAME_START )
    {
        Log( "Невозможно сменить гейммод у " + GetPlayerName( cr.Id ) + " (" + cr.Id + ")" );
        return false;
    }
    if( mode <= GAME_START || mode >= GAME_MAX )
    {
        Log( "Неверный целевой гейммод, " + GetPlayerName( cr.Id ) + " (" + cr.Id + ")" );
        return false;
    }

    cr.ParamBase[ QST_GAMEMODE ] = mode;
    return true;
}

bool IsInGame( Critter& cr )
{
    return ( cr.WorldX < 350 || cr.WorldY < 600 );
}

import void FullHeal( Critter& cr ) from "gm";

class Gameplay : iManagerModule, iManager_loop,
      iManager_critter_init, iManager_critter_finish,
      iManager_critter_idle, iManager_critter_dead, iManager_critter_respawn,
      iManager_map_critter_in, iManager_map_critter_out,
      iManager_world_save, iManager_time  // , iManager_player_registration, iManager_player_login, iManager_time
{
    Gameplay()
    {
        AddStartCallback( "gameplay", "start" );
    }
    bool manager_init()
    {
        // вызывается в порядке приоритетов
        return true;
    }
    uint global_loop()
    {
        return uint( -1 );
    }
    bool global_critter_init( Critter& cr, bool firstTime )
    {
        if( cr.IsNpc() )
            return true;

        if( firstTime )
        {
            cr.ParamBase[ QST_GAMEMODE ] = GAME_INVALID;

			for(uint y=0; y<__GlobalMapHeight; y++)
				for(uint x=0; x<__GlobalMapWidth; x++)
					cr.SetFog(x, y, FOG_NONE);

            /*uint zoneX = cr.WorldX / __GlobalMapZoneLength;
            uint zoneY = cr.WorldY / __GlobalMapZoneLength;
            cr.SetFog( zoneX, zoneY, FOG_FULL );
            cr.SetFog( zoneX - 1, zoneY - 1, FOG_FULL );
            cr.SetFog( zoneX, zoneY - 1, FOG_FULL );
            cr.SetFog( zoneX + 1, zoneY - 1, FOG_FULL );
            cr.SetFog( zoneX - 1, zoneY, FOG_FULL );
            cr.SetFog( zoneX + 1, zoneY, FOG_FULL );
            cr.SetFog( zoneX - 1, zoneY + 1, FOG_FULL );
            cr.SetFog( zoneX, zoneY + 1, FOG_FULL );
            cr.SetFog( zoneX + 1, zoneY + 1, FOG_FULL );*/
        }

        if( cr.Param[ QST_GAMEMODE ] == GAME_INVALID )
        {
            if( TeleportToStart( cr ) )
                cr.ParamBase[ QST_GAMEMODE ] = GAME_START;
            else
            {
                cr.Disconnect();
                return false;
            }
        }

        Map@ map = cr.GetMap();

        if( !IsInGame( cr ) )
        {
            if( cr.ParamBase[ QST_GAMEMODE ] > GAME_START && (map is null) )
            {
                CreateModeStart( cr );
            }
        }
        else
        {
            if( cr.Param[ QST_GAMEMODE ] == GAME_ARCADE )
            {
                DontPickItUp( cr );
                cr.ToDead( 0, null );
            }
        }

        AfterLogin( cr );

        return true;
    }
    bool global_critter_finish( Critter& cr, bool toDelete )
    {
		/*
		if( cr.IsPlayer() ) {
			Map@ map = cr.GetMap();
			if( valid(map) )
				map.SetData( 0, map.GetData( 0 ) - 1 );
		}
		*/
        return true;
    }
    bool global_critter_idle( Critter& cr )
    {
		if( cr.ParamBase[CR_TEMP] > 0 )
			cr.ParamBase[CR_TEMP]--;

		if( cr.ParamBase[CR_TEMP] < 0 )
			cr.ParamBase[CR_TEMP]++;
		
		if( cr.IsDead() && cr.IsPlayer() )
		{
			Map @map = cr.GetMap();
			if( valid(map) && map.GetProtoId() == MAP_HELL )
			{
				GameVar@ canPray = GetGlobalVar( GVAR_Pray_Battleground );
				if( canPray.GetValue() != 0 )
				{
					Location@ location = GetLocationByPid( LOCATION_Deadloc, 0 );
					if( valid( location ) )
					{
						@map = location.GetMapByIndex( 0 );
						if( valid( map ) )
							cr.TransitToMap( map.Id, 241 );
					}
					cr.ToLife();
					FullHeal( cr );
					cr.Say( SAY_NETMSG, ( Random(0,1) == 0 ? "Колесо сансары дало оборот." : "Сколько ещё раз вам нужно умереть, что бы наконец успокоиться?" ) );
					return true;
				}
			}
		}
		
        if( cr.IsDead() && cr.Stat[ ST_REPLICATION_TIME ] >= 0 && cr.Timeout[ TO_REPLICATION ] == 0 )
        {
            if( !RespawnCritter( cr ) )
                cr.TimeoutBase[ TO_REPLICATION ] = __FullSecond + REAL_MINUTE( 10 );
        }
        if( __Zombies && !cr.IsDead() && cr.Param[ ST_BODY_TYPE ] == BT_ZOMBIE && cr.Param[ TO_DEAD ] == 0 )
            cr.ToDead( ANIM2_DEAD_FRONT, null );


		if( cr.StatBase[ ST_DYSPNEA ] < 100 && cr.GetTimeEvents( CTE_DYSPNEA, null, null, null ) < 1 )
			DypsneaCr(cr);

		if( cr.Stat[ ST_POISONING_LEVEL ] > 0 && cr.GetTimeEvents( CTE_POISON, null, null, null ) < 1 )
			cr.AddTimeEvent( "poison@cte_Poison", REAL_SECOND( 5 ), CTE_POISON );
			
        return true;
    }
    bool global_critter_dead( Critter& cr, Critter@ killer )
    {
        Map@ map = cr.GetMap();
        if( map is null )
        {
            Log( "Error! Death map is null" );
            return false;
        }

        if( cr.Param[ QST_GAMEMODE ] == GAME_ARCADE )
        {
			Item@[] items;
			uint len = cr.GetItems( -1, items );
			if( len != 0 ) DeleteItems( items );
		}
        else
        {
            if( killer !is null and killer.Param[ QST_GAMEMODE ] == GAME_ARCADE and cr.Stat[ ST_BODY_TYPE ] < 5)
            {
				int vLevel = cr.Stat[ ST_LEVEL ];
				int kBody = killer.Stat[ ST_BODY_TYPE ];
				if( kBody > 4 && kBody < 10 || kBody > 10 ) killer.StatBase[ ST_EXPERIENCE ] += vLevel * 100;

				// ChangeWildness(cr.WorldX/10, cr.WorldY/10, 10);
			}

            old_drop_stuff_if_bluddy( cr, map );
        }

        // if(cr.IsPlayer() && cr.Param[QST_GAMEMODE]!=GAME_ARCADE) act_var_set(cr, ACT_DEAD); // && cr.CondExt>COND_DEAD_BURST &&

        int replTime = cr.Stat[ ST_REPLICATION_TIME ];
        if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT && cr.IsPlayer() )
            replTime = -1;

        if( replTime < 0 )
        {
            if( cr.StatBase[ ST_BODY_TYPE ] > 0 )
            {
                ChangeMonsterCount( cr, 1, false );
            }
            return true;
        }         // No respawn

        if( cr.Param[ QST_GAMEMODE ] == GAME_ARCADE )
        {
            replTime = REAL_SECOND( 10 );
        }
        else if( replTime == 0 )     // Take default values
        {
            if( cr.IsPlayer() )
            {
                /*if(act_var_check(cr)) replTime=max(abs(cr.Stat[ST_CURRENT_HP])-30, 0)*2+10;
                   else replTime=15;*/
                if( cr.Anim2Dead <= ANIM2_DEAD_BURST )
                    replTime = REAL_MINUTE( 45 );
                else
                    replTime = REAL_MINUTE( 15 );
                // replTime*=REAL_SECOND(1);
            }
            else
            {
                int team = cr.Stat[ ST_TEAM_ID ];
                if( team == TEAM_DEATHCLAW_METRA || team == TEAM_ALIEN_METRA || team == TEAM_FIREGECKO_METRA || team == TEAM_CENTAUR_METRA )
                {
                    replTime = REAL_HOUR( 3 );
                }
                else
                {
                    replTime = Random( 30, 60 );                // 30-60 minutes
                    replTime *= REAL_MINUTE( 1 );
                }
            }
        }
        else
        {
            replTime *= REAL_MINUTE( 1 );
        }

        cr.TimeoutBase[ TO_REPLICATION ] = __FullSecond + replTime;

        return true;
    }

    bool RespawnCritter( Critter& cr )
    {
        Map@ dieMap = cr.GetMap();

        if( dieMap is null && cr.StatBase[ QST_GAMEMODE ] != GAME_ARCADE )
        {
            // Continue dead
            Log( "Critter #" + cr.Id + " is dead and on global. WTF?" );
            return false;
        }
        if( cr.IsNpc() )
        {
            return respawn_npc( cr, dieMap );
        }

        if( cr.Stat[ ST_BODY_TYPE ] == BT_ROBOT )
            return false;

        int GM = cr.Param[ QST_GAMEMODE ];

        if( GM == GAME_ARCADE )
        {
            Location@ loc = GetLocationByPid( 94, 0 );

            if( loc is null )
            {
                uint locid = CreateLocation( 94, 525, 75, null );
                @loc = GetLocation( locid );

                if( not valid( loc ) )
                {
                    Log( "can't create dead loc" );
                    return false;
                }
            }
            Map@ map = null;
            @map = loc.GetMapByIndex( 0 );

            if( not valid( map ) )
            {
                Log( "can't get dead map" );
                return false;
            }

            if( !cr.TransitToMap( map.Id, 0 ) )
            {
                cr.TimeoutBase[ TO_REPLICATION ] = __FullSecond + REAL_MINUTE( 1 );
                return true;
            }
        }

        uint16 hx0 = cr.HexX, hy0 = cr.HexY, hx = 0, hy = 0;
        uint8  condition = cr.Anim2Dead;
        Map@   map = null;

        if( GM == GAME_SURVIVAL || GM == GAME_ADVENTURE )
        {
            Location@ loc = GetLocationByPid( LOCATION_Deadloc, 0 );

            if( loc is null )
            {
                uint locid = CreateLocation( LOCATION_Deadloc, cr.WorldX, cr.WorldY, null );
                @loc = GetLocation( locid );

                if( not valid( loc ) )
                {
                    Log( "can't create dead loc" );
                    return false;
                }
            }

            @map = loc.GetMapByIndex( 0 );

            if( not valid( map ) )
            {
                Log( "can't get dead map" );
                return false;
            }

            if( !cr.TransitToMap( map.Id, 241 ) )
            {
                // Continue dead
                cr.TimeoutBase[ TO_REPLICATION ] = __FullSecond + REAL_MINUTE( 1 );
                return true;
            }
        }
        else
        {
            @map = @dieMap;
            hx = cr.HexX;
            hy = cr.HexY;
            if( not map.IsHexPassed( hx, hy ) )
            {
                bool founded = false;
                for( int x = -1; x <= 1; x++ )
                {
                    for( int y = -1; y <= 1; y++ )
                    {
                        if( x == 0 && y == 0 )
                            continue;                                      // Skip direct position
                        if( ( hx % 2 ) == 1 && ( ( x == -1 && y == 1 ) || ( x == 1 && y == 1 ) ) )
                            continue;
                        if( ( hx % 2 ) == 0 && ( ( x == -1 && y == -1 ) || ( x == 1 && y == -1 ) ) )
                            continue;

                        if( map.IsHexPassed( hx + x, hy + y ) )
                        {
                            hx += x;
                            hy += y;
                            founded = true;
                            break;
                        }
                    }
                    if( founded )
                        break;
                }

                if( not founded )
                {
                    // Continue dead
                    cr.TimeoutBase[ TO_REPLICATION ] = __FullSecond + REAL_MINUTE( 1 );
                    return true;
                }
            }
            cr.TransitToMap( map.Id, hx, hy, Random( 0, 5 ) );
        }

        if( _CritCanDropItemsOnDead( cr ) )
        {
            Item@[] items;
            cr.GetItems( -1, items );
            // Disable drop of hidden items
            for( uint i = 0, j = items.length(); i < j; i++ )
                if( FLAG( items[ i ].Flags, ITEM_HIDDEN ) )
                    @items[ i ] = null;

            Item@ skeleton;
            if( condition < ANIM2_DEAD_PULSE )
                @skeleton = dieMap.AddItem( hx0, hy0, PID_VAULT_DWELLER_BONES, 1 );
            if( valid( skeleton ) )
            {
                skeleton.Val1 = cr.Id;
                MoveItems( items, skeleton, 0 );
                uint[] values = { dieMap.Id, skeleton.Id };
                CreateTimeEvent( __FullSecond + REAL_MINUTE( 180 ), "e_deleteBody", values, true );

                // set rigth direct
                Item_SetFrame( skeleton, cr.Dir );
            }
            else
                MoveItems( items, dieMap, hx0, hy0 );
        }

        cr.ToLife();
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];

        return true;
    }

    bool global_critter_respawn( Critter& cr )
    {
        // if(cr.IsNpc()) {return true;}

        return true;
    }
	
    bool global_map_critter_in( Map& map, Critter& cr )
    {
		if(cr.IsNpc()) return true;
		
		// if(valid(map))
		// {
			// Location@ loc = map.GetLocation();
			// if(valid(loc))
			// {
				// if( loc.GetProtoId() == 25 ) //Форт Саттер, верх и низ.
					// PlayMusic( cr, "Metallic Monks.ogg", 1, 1 );
			// }
		// }

		//map.SetData( 0, map.GetData( 0 ) + 1 );
        if( cr.Param[ QST_GAMEMODE ] == GAME_ARCADE )
        {
            Location @ loc = map.GetLocation();
            int x = 0, y = 0;
            x = loc.WorldX * 0.1;
            y = loc.WorldY * 0.1;
            int Wild1 = 100, Wild2 = 100, Wild = 100;
            if( ABS( x - 7 ) + ABS( y - 7 ) <= 10 )
            {
                Wild1 = ( ABS( x - 7 ) + ABS( y - 7 ) ) * 10;
                Wild1 = CLAMP( Wild1, 0, 100 );
            }
            if( ABS( x - 17 ) + ABS( y - 15 ) <= 8 )
            {
                Wild2 = ( ABS( x - 17 ) + ABS( y - 15 ) + 2 ) * 10;
                Wild2 = CLAMP( Wild2, 0, 100 );
            }
            Wild = CLAMP( Wild, 0, Wild1 );
            Wild = CLAMP( Wild, 0, Wild2 );
            uint8  BonusWild = 0;
            uint16 time = 0;
            uint16 hour = 0;
            GetTime( time, time, time, time, hour, time, time, time );
            if( 7 > hour && hour > 22 )
                BonusWild = 20;                     // bonus wildness at night

            uint8 Wild_delta = cr.Param[ ST_ARCADE_DANGER ] - ( Wild + BonusWild );
            if( Wild_delta <= 0 )
                return true;
            else if( Wild_delta >= 50 )
                cr.ToDead( 0, null );
            else if( Wild_delta >= 40 )
            {
                cr.ParamBase[ ST_NORMAL_ABSORB ] = cr.ParamBase[ ST_NORMAL_ABSORB ] * 0.6 - 1;
                cr.ParamBase[ ST_NORMAL_RESIST ] = cr.ParamBase[ ST_NORMAL_RESIST ] * 0.6 - 1;
                cr.ParamBase[ ST_MELEE_DAMAGE ] = cr.ParamBase[ ST_MELEE_DAMAGE ] * 0.6 - 1;
                cr.ParamBase[ ST_CURRENT_HP ] = cr.ParamBase[ ST_CURRENT_HP ] * 0.5;
                cr.ParamBase[ ST_MAX_LIFE ] = cr.ParamBase[ ST_MAX_LIFE ] * 0.6 - 5;
            }
            else if( Wild_delta >= 30 )
            {
                cr.ParamBase[ ST_NORMAL_ABSORB ] = cr.ParamBase[ ST_NORMAL_ABSORB ] * 0.7 - 1;
                cr.ParamBase[ ST_NORMAL_RESIST ] = cr.ParamBase[ ST_NORMAL_RESIST ] * 0.7 - 1;
                cr.ParamBase[ ST_MELEE_DAMAGE ] = cr.ParamBase[ ST_MELEE_DAMAGE ] * 0.7 - 1;
                cr.ParamBase[ ST_CURRENT_HP ] = cr.ParamBase[ ST_CURRENT_HP ] * 0.7;
                cr.ParamBase[ ST_MAX_LIFE ] = cr.ParamBase[ ST_MAX_LIFE ] * 0.7 - 5;
            }
            else if( Wild_delta >= 20 )
            {
                cr.ParamBase[ ST_NORMAL_ABSORB ] = cr.ParamBase[ ST_NORMAL_ABSORB ] * 0.8 - 1;
                cr.ParamBase[ ST_NORMAL_RESIST ] = cr.ParamBase[ ST_NORMAL_RESIST ] * 0.8 - 1;
                cr.ParamBase[ ST_MELEE_DAMAGE ] = cr.ParamBase[ ST_MELEE_DAMAGE ] * 0.8 - 1;
                cr.ParamBase[ ST_CURRENT_HP ] = cr.ParamBase[ ST_CURRENT_HP ] * 0.8;
                cr.ParamBase[ ST_MAX_LIFE ] = cr.ParamBase[ ST_MAX_LIFE ] * 0.8 - 5;
            }
            else if( Wild_delta >= 10 )
            {
                cr.ParamBase[ ST_NORMAL_ABSORB ] = cr.ParamBase[ ST_NORMAL_ABSORB ] * 0.9 - 1;
                cr.ParamBase[ ST_NORMAL_RESIST ] = cr.ParamBase[ ST_NORMAL_RESIST ] * 0.9 - 1;
                cr.ParamBase[ ST_MELEE_DAMAGE ] = cr.ParamBase[ ST_MELEE_DAMAGE ] * 0.9 - 1;
                cr.ParamBase[ ST_CURRENT_HP ] = cr.ParamBase[ ST_CURRENT_HP ] * 0.9;
                cr.ParamBase[ ST_MAX_LIFE ] = cr.ParamBase[ ST_MAX_LIFE ] * 0.9 - 5;
            }
            return true;
        }
        return true;
    }
    bool global_map_critter_out( Map& map, Critter& cr )
    {
		if(cr.IsNpc()) return true;
		
		//map.SetData( 0, map.GetData( 0 ) - 1 );
        return true;
    }
    bool global_world_save()
    {
        return true;
    }
    bool global_player_registration( uint ip, string& name, uint& textMsg, uint& strNum )
    {
        return true;
    }
    bool global_player_login( uint ip, string& name, uint id, uint& textMsg, uint& strNum )
    {
        Critter@ cr = GetCritter( id );
        if( cr !is null )
            AfterLogin( cr );
        return true;
    }
    void AfterLogin( Critter& cr )
    {
        // Map@ map = cr.GetMap();
		// if(valid(map))
		// {
			// Location@ loc = map.GetLocation();
			// if(valid(loc))
			// {
				// if( loc.GetProtoId() == 25 ) //Форт Саттер, верх и низ.
					// PlayMusic( cr, "Metallic Monks.ogg", 1, 1 );
			// }
		// }
		
		if( isGM( cr ) )
		{
			GameVar@ autoOffOldGMs = GetGlobalVar( GVAR_autoOffOldGMs );		
			if( autoOffOldGMs.GetValue() != 0 )
			{
				cr.StatBase[ ST_ACCESS_LEVEL ] = 0;
				cr.Say( SAY_NETMSG, "Ваш уровень доступа сброшен в связи с глобальными настройками отзыва карманной ГМки." );
			}
		}
		
		
		//cr.AddTimeEvent( "cte_ban", 2* __TimeMultiplier, 0, 0 ); //Нахуй баны, АНАРХИЯ!
		if( cr.StatBase[ ST_BODY_TYPE ] != BT_ROBOT )
		{
			if( cr.GetTimeEvents( CTE_THIRST, null, null, null ) < 1 )
				cr.AddTimeEvent( "cte_Thirst", REAL_SECOND( cr.Param[ CR_THIRST_SPEED ] ), CTE_THIRST, 0 );
			
			if( cr.GetTimeEvents( CTE_HUNGER, null, null, null ) < 1 )
				cr.AddTimeEvent( "cte_Hunger", REAL_SECOND( cr.Param[ CR_HUNGER_SPEED ] ), CTE_HUNGER, 0 );
		}		
		
		if( cr.GetTimeEvents( CTE_DIRT, null, null, null ) < 1 )
			cr.AddTimeEvent( "cte_Dirt", 0, CTE_DIRT, 0 );			
		
		RottenFood( cr );
		
		if( cr.StatBase[ ST_UNSPENT_PERKS ] > 0 )
			cr.StatBase[ ST_UNSPENT_PERKS ] = 0;
    }

    bool global_time( int8 type )
    {
        if( type == TIME_NEW_HOUR )
        {
           	GameVar@ cycle = GetGlobalVar( GVAR_rotten_cycle );
			if(valid(cycle)) 
			{
				if( cycle.GetValue() < 999 ) cycle.opAddAssign( 1 );
				else cycle.opAssign( 0 );
			}

			ObjectTimeLoop();             // sutter objects
        }

        if( type == TIME_NEW_DAY )       // 142
        {
            GlobalCellPopulation();
            GlobalCellSpawnLo();
        }
        return true;
    }
}

void RespawnWorld( Critter& cr, int p0, int p1, int p2 )
{
	GlobalCellPopulation();
	GlobalCellSpawnLo();
	cr.Say( SAY_NETMSG, "Поосторожней с этой командой - обновляется абсолютно всё мобьё и лут!" );
}

uint cte_ban( Critter& player, int identifier, uint& rate )
{
    if( player.Param[ QST_GAMEMODE ] == GAME_ARCADE )
    {
        Map@ map = GetMapByPid( MAP_UTILITY_ARCADE, 0 );
        if( !valid( map ) )
            player.Say( SAY_NETMSG, "Нет карты аркады, обратитесь к Мастерам." );
        player.TransitToMap( map.Id, 0 );
    }
    player.RunClientScript("client_main@CheckHardBan", 0, 0, 0, null, null);
    return 0;
}

uint cte_Dirt( Critter& cr, int identifier, uint& rate )
{
	if( !isGM( cr ) && !cr.IsDead() && !cr.IsKnockout() && cr.Param[ QST_GAMEMODE ] != GAME_START )
	{
		cr.ParamBase[ CR_DIRTINESS ] += Random( 0, 2 );
		
		if( cr.ParamBase[ CR_DIRTINESS ] > 100 )
		{
			cr.ParamBase[ CR_DIRTINESS ] = 100;
			cr.Say( SAY_EMOTE, "воняет" );
		}
	}
	return REAL_MINUTE(10);
}

uint cte_Thirst( Critter& cr, int identifier, uint& rate )
{
	if( cr.StatBase[ ST_BODY_TYPE ] == BT_ROBOT )
		return 0;
    
	if( !cr.IsDead() && !cr.IsKnockout() && !isGM( cr )
		&& cr.Param[ QST_GAMEMODE ] != GAME_START && cr.Param[ QST_GAMEMODE ] != GAME_ARCADE )
	{
		cr.StatBase[ ST_THRIST ] -= Random( 0, 2 );
	}
	return REAL_SECOND( cr.Param[ CR_THIRST_SPEED ] );
}

uint cte_Hunger( Critter& cr, int identifier, uint& rate )
{
	if( cr.StatBase[ ST_BODY_TYPE ] == BT_ROBOT )
		return 0;
    
	if( !cr.IsDead() && !cr.IsKnockout() && !isGM( cr )
		&& cr.Param[ QST_GAMEMODE ] != GAME_START && cr.Param[ QST_GAMEMODE ] != GAME_ARCADE )
	{
		cr.StatBase[ ST_HUNGER ] -= Random( 0, 2 );
	}
	return REAL_SECOND( cr.Param[ CR_HUNGER_SPEED ] );
}

uint cte_Exp( Critter& cr, int identifier, uint& rate ) //Начисление опыта через опред. промежуток времени
{
	int psy_exp = 10 + cr.StatBase[ ST_INTELLECT ]*8;
	int psy_pre = Random( 1, 3 );
	cr.StatBase[ST_EXPERIENCE] += 200;
	if( cr.Param[ P_PSI ] >= 1 )
	{
		cr.ParamBase[ P_PSI ] += psy_exp;
		if( cr.Param[ P_PSI ] >= cr.Param[ P_PSI_MAX ] ){ cr.ParamBase[ P_PSI ] = cr.Param[ P_PSI_MAX ]; psy_exp = 0;}
		if( cr.Param[ P_PSI ] >= cr.Param[ P_PSI_MAX ] && cr.Param[ P_PSI_LIMIT ] >= 3 ){ cr.ParamBase[ P_PSI_LIMIT ] -= psy_pre; cr.Say( SAY_NETMSG, "Саморазрушение понизилось на " + psy_pre + " единицы" );}
		cr.Say( SAY_NETMSG, "Вы восстановили " + psy_exp + " единиц пси-силы" );
	}
	
	return 15 * 60 * __TimeMultiplier;
}

Gameplay gameplay;

void start()
{
    iManagerModule@  module = gameplay;
    iManagerElement@ manager = manager_add_module( module, "Gameplay", 40 );
    if( manager is null )
        return;

    // manager.TimeChangeCall() = TIME_NEW_<MINUTE/HOUR/DAY/MONTH/YEAR>;
}

// используется
bool CreateModeStart( Critter& cr )
{
    return TeleportToStart( cr );
}

// используется
bool TeleportToStart( Critter& cr )
{
    Map@ start = GetMapByPid( MAP_UTILITY_START, 0 );

    if( valid( start ) && cr.TransitToMap( start.Id, 0 ) )
    {
        /*zoneX=cr.WorldX/__GlobalMapZoneLength;
           zoneY=cr.WorldY/__GlobalMapZoneLength;
           cr.SetFog(zoneX  ,zoneY  ,FOG_NONE);
           cr.SetFog(zoneX-1,zoneY-1,FOG_HALF);
           cr.SetFog(zoneX  ,zoneY-1,FOG_HALF);
           cr.SetFog(zoneX+1,zoneY-1,FOG_HALF);
           cr.SetFog(zoneX-1,zoneY  ,FOG_HALF);
           cr.SetFog(zoneX+1,zoneY  ,FOG_HALF);
           cr.SetFog(zoneX-1,zoneY+1,FOG_HALF);
           cr.SetFog(zoneX  ,zoneY+1,FOG_HALF);
           cr.SetFog(zoneX+1,zoneY+1,FOG_HALF);
         */
		cr.AddTimeEvent( "cte_ban", 2* __TimeMultiplier, 0, 0 );
        return true;
    }
    Log( "Transit to start error! PlayerId: " + cr.Id );
    return false;
}

// используется
bool respawn_npc( Critter& cr, Map@ map )
{
    if( not valid( map ) ) // On global, delete
    {
        DeleteNpc( cr );
        return true;
    }

    uint16 hx = cr.HexX,
           hy = cr.HexY;

    if( not map.IsHexPassed( hx, hy ) )
    {
        bool founded = false;
        for( int x = -1; x <= 1; x++ )
        {
            for( int y = -1; y <= 1; y++ )
            {
                if( x == 0 && y == 0 )
                    continue;                              // Skip direct position

                if( __MapHexagonal )
                {
                    if( ( hx % 2 ) == 1 && ( ( x == -1 && y == 1 ) || ( x == 1 && y == 1 ) ) )
                        continue;
                    if( ( hx % 2 ) == 0 && ( ( x == -1 && y == -1 ) || ( x == 1 && y == -1 ) ) )
                        continue;
                }

                if( map.IsHexPassed( hx + x, hy + y ) )
                {
                    hx += x;
                    hy += y;
                    founded = true;
                    break;
                }
            }
            if( founded )
                break;
        }

        if( not founded )
        {
            // Continue dead
            cr.TimeoutBase[ TO_REPLICATION ] = __FullSecond + REAL_MINUTE( 1 );
            return true;
        }
    }

    cr.TransitToMap( map.Id, hx, hy, Random( 0, 5 ) );
    cr.ToLife();

    cr.DropPlanes();
    cr.ClearEnemyStackNpc();
    cr.StatBase[ ST_LAST_WEAPON_ID ] = 0;

    if( cr.Stat[ ST_DEAD_BLOCKER_ID ] != 0 )
    {
        Item@ block = ::GetItem( cr.Stat[ ST_DEAD_BLOCKER_ID ] );
        if( valid( block ) )
            DeleteItem( block );
        cr.StatBase[ ST_DEAD_BLOCKER_ID ] = 0;
    }

    cr.DamageBase[ DAMAGE_EYE ] = 0;
    cr.DamageBase[ DAMAGE_RIGHT_ARM ] = 0;
    cr.DamageBase[ DAMAGE_LEFT_ARM ] = 0;
    cr.DamageBase[ DAMAGE_RIGHT_LEG ] = 0;
    cr.DamageBase[ DAMAGE_LEFT_LEG ] = 0;

    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.Stat[ ST_ACTION_POINTS ] * 100;

    DropPoison( cr );
    DropRadiation( cr );
    DropDrugEffects( cr );
    cr.DropTimers();
    for( uint i = TIMEOUT_BEGIN; i <= TIMEOUT_END; i++ )
        if( i != TO_TIREDNESS )
            cr.TimeoutBase[ i ] = 0;

    return true;
}



// используется
void old_drop_stuff_if_bluddy( Critter& cr, Map& map )
{
    if( ( cr.Anim2Dead == ANIM2_DEAD_PULSE_DUST || cr.Anim2Dead == ANIM2_DEAD_EXPLODE ) && _CritCanDropItemsOnDead( cr ) )
    {
        // Drop all, exclude armor
        Item@[] items;
        cr.GetItems( SLOT_INV, items );
        cr.GetItems( SLOT_HAND1, items );
        cr.GetItems( SLOT_HAND2, items );
        // Disable drop of hidden items
        for( uint i = 0, j = items.length(); i < j; i++ )
        {
            if( FLAG( items[ i ].Flags, ITEM_GAG ) )
            {
                Item@ item = items[ i ];
                if( valid( item ) )
                    DeleteItem( item );
                @items[ i ] = null;
            }
            else if( FLAG( items[ i ].Flags, ITEM_HIDDEN ) )
                @items[ i ] = null;
        }
        MoveItems( items, map, cr.HexX, cr.HexY );
    }
}

uint e_deleteBody( uint[] @ values )
{
    Map@  map = GetMap( values[ 0 ] );
    Item@ item = GetItem( values[ 1 ] );
    Item@[] items;
    if( valid( item ) )
    {
        item.GetItems( -1, items );

        if( valid( map ) )
            MoveItems( items, map, item.HexX, item.HexY );
        else
            DeleteItems( items );

        DeleteItem( item );
    }
    return 0;
}
