// Author: Mio
// Социальные приправы.

#include "_macros.fos"
#include "_colors.fos"

import int BitUnpacker( int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitPacker( int cell, int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import int BitZeroing( int storage, uint8 index, uint8 bit ) from "mio_deviants_toolkit";
import uint8 ChoiceMask( int[] list ) from "mio_deviants_toolkit";

// ####################################################################################################
// #                                       Obvious AID Manager                                        #
// ####################################################################################################

// ДЛЯ ВСЕХ.
#define TARGETID								( ST_VAR0 )					// Параметр криттера содержащий ID, с которым происходит взаимодействие.
#define TARGETPID								( ST_VAR1 )					// Параметр криттера содержащий PID, с которым происходит взаимодействие.
#define MENU_STORAGE							( ST_VAR2 )					// Параметр криттера содержащий выбор меню.



// ####################################################################################################
// #                                           Compression                                            #
// ####################################################################################################

string Centering( string list ) // Центрирование текста в меню.
{
	if( list.length() > 16 ) { return list; }
	string tab = "";
	for( uint8 i = 0, l = ( 18 - list.length() ); i < l; i++ ) { tab += " "; }
	return tab+list;
}
void MenuMaker( Critter& initiator, string[] list, string@ headline, string@ pointer ) // Генератор менюшек.
{
	uint8 length = list.length();
	initiator.ShowScreen( SCREEN_DIALOGBOX, length, pointer );
	initiator.Say( SAY_DIALOGBOX_TEXT, headline );
	for( uint8 i = 0; i < length; i++ ) { initiator.Say( SAY_DIALOGBOX_BUTTON( i ), Centering( list[ i ] ) ); }
	initiator.Say( SAY_DIALOGBOX_BUTTON( length ), Centering( "Отмена" ) );
}

string Color( uint color ) { return "|"+color+" "; }

// ************************************************** Дичь и говнокод **************************************************



// ================================================== Мелочёвка ==================================================

void CoinUse( Critter& cr, Item& item )
{
	string emote = "Подкидывает монетку: ";
	string side = Random( 0, 1 ) == 1 ? "Бермин" : "Бак";
	string result = "";

	cr.Say( SAY_NORM, Color( COLOR_TEXT )+"- " +Color( COLOR_YELLOW )+side +Color( COLOR_TEXT )+" -" );
	cr.Say( SAY_EMOTE_ON_HEAD, emote + " " + Color( COLOR_TEXT )+side+Color( COLOR_EMOTE ) );
}

// ####################################################################################################
// #                                               Dice                                               #
// ####################################################################################################

void DiceUse( Critter& cr, Item& item )
{
	string emote = cr.Param[ ST_GENDER ] == 0 ? "Выбросил" : ( cr.Param[ ST_GENDER ] == 1 ? "Выбросила" : "Выбросило" );
	uint8 variable = Random( 1, 6 );
	if( item.Val5 != 0 && item.Val5 != variable )
	{
		if( Random( 0, 9 ) < item.Val6 ) { variable = item.Val5; }
	}

	cr.Say( SAY_NORM, Color( COLOR_TEXT )+"- " +Color( COLOR_YELLOW )+variable +Color( COLOR_TEXT )+" -" );
	cr.Say( SAY_EMOTE_ON_HEAD, emote + " " + variable );
}
void DiceAdjustment( Critter& cr, Item& targetItem )
{
	cr.ParamBase[ TARGETID ] = targetItem.Id;

	string PickUp = FLAG( targetItem.Flags, ITEM_CAN_PICKUP ) ? "Поднимаемые" : "Настольные";
	string[] list = { PickUp, "*Утяжелить*" };
	MenuMaker( cr, list, "Что делать с костями?", "DiceModification" );
}
void DiceModification( Critter& cr, uint answerI, string& answerS )
{
	if( answerI == 0 )
	{
		Item @ ItemDice = GetItem( cr.Param[ TARGETID ] );
		FLAG( ItemDice.Flags, ITEM_CAN_PICKUP ) ? UNSETFLAG( ItemDice.Flags, ITEM_CAN_PICKUP ) : SETFLAG( ItemDice.Flags, ITEM_CAN_PICKUP );
		DiceAdjustment( cr, ItemDice );
		return;
	}
	if( answerI == 1 )
	{
		if( cr.Timeout[ TO_SK_REPAIR ] > 0 ) { cr.Say( SAY_NETMSG, "Это слишком кропотливо. Вам нужно отдохнуть." ); return; }
		string[] list = { "Баланс", "1", "2", "3", "4", "5", "6" };
		MenuMaker( cr, list, "Какую сторону утяжелять?", "LoadingDice" );
	}
}
void LoadingDice( Critter& cr, uint answerI, string& answerS )
{
	cr.ParamBase[ MENU_STORAGE ] = answerI;
	if( answerI == 0 ) { LoadingDiceEnd( cr, answerI, "" ); return; }

	string[] list = { "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%" };
	MenuMaker( cr, list, "Степень утяжеления:", "LoadingDiceEnd" );
}
void LoadingDiceEnd( Critter& cr, uint answerI, string& answerS )
{
	answerI++;
	uint8 luck = Random( 150, 300 ) - ( answerI * 10 );
	cr.TimeoutBase[ TO_SK_REPAIR ] = __FullSecond + REAL_MINUTE( 10 );
	if( luck > cr.Param[ SK_REPAIR ] ) { cr.Say( SAY_NETMSG, "Вы утомляетесь от этой ювелирной работы, так и не достигнув желаемого результата." ); return; }

	Item @ ItemDice = GetItem( cr.Param[ TARGETID ] );
	cr.ParamBase[ TARGETID ] = 0;
	if( !valid( ItemDice ) ) { return; }

	//int skill = cr.Skill[ SK_REPAIR ];
	uint8 side = cr.Param[ MENU_STORAGE ];

	ItemDice.Val5 = side;
	ItemDice.Val6 = answerI;
	if( side != 0 ) { cr.Say( SAY_NETMSG, "Вы утяжелили кость на стороне " + side + " на " + answerI + "0%" ); }
	else { cr.Say( SAY_NETMSG, "Вы восстановили вселенское равновесие, сбалансировав игральную кость." ); }
	cr.Say( SAY_EMOTE, "Возится с игральной костью" );
}



// ####################################################################################################
// #                                              Cards                                               #
// ####################################################################################################

int[] CardsSide( int storage )
{
	int[] color = {};
	for( uint8 i = 0; i < 27; i++ ) { color.insertLast( BitUnpacker( storage, i, 1 ) ); }
	return color;
}

void CardsUse( Critter& cr, Item& item )
{
	if( item.Val3 == 0 && item.Val4 == 0 ) { cr.Say( SAY_NETMSG, "Колода опустела, нужно перетасовать." ); return; }

	string emote = cr.Param[ ST_GENDER ] == 0 ? "Вытянул" : ( cr.Param[ ST_GENDER ] == 1 ? "Вытянула" : "Вытянуло" );
	int[] SideMask;
	bool colorSide = Random( 0, 1 ) == 0 ? false : true;
	if( colorSide )
	{
		if( item.Val3 > 0 ) { SideMask = CardsSide( item.Val3 ); } else { SideMask = CardsSide( item.Val4 ); colorSide = false; }
	}
	else
	{
		if( item.Val4 > 0 ) { SideMask = CardsSide( item.Val4 ); } else { SideMask = CardsSide( item.Val3 ); colorSide = true; }
	}
	int Card = ChoiceMask( SideMask );
	string[] picture = { "вальта", "даму", "короля", "туза" };
	string[] picturechat = { "Валет", "Дама", "Король", "Туз" };
	string[] lear = { "буби", "черви", "треф", "пик" };
	string result = " ";
	string resultchat = " ";
	if( colorSide )
	{
		if( Card <= 12 )
		{
			if( Card <= 8 ) { result += ( Card + 2 )+"-ку " +lear[ 0 ]; resultchat += ( Card + 2 )+" " +Color( COLOR_LRED )+lear[ 0 ]; }
			else { result += picture[ Card - 9 ] +" "+lear[ 0 ]; resultchat += picturechat[ Card - 9 ] +" "+Color( COLOR_LRED )+lear[ 0 ]; }
		}
		else if( Card <= 25 )
		{
			if( Card <= 21 ) { result += ( Card - 11 )+"-ку " +lear[ 1 ]; resultchat += ( Card - 11 )+" " +Color( COLOR_LRED )+lear[ 1 ]; }
			else { result += picture[ Card - 22 ] +" "+lear[ 1 ]; resultchat += picturechat[ Card - 22 ] +" "+Color( COLOR_LRED )+lear[ 1 ]; }
		}
		else { result += "цветного джокера"; resultchat += Color( COLOR_LRED )+"Цветной джокер"; }

		item.Val3 = BitZeroing( item.Val3, Card, 1 );
	}
	else
	{
		if( Card <= 12 )
		{
			if( Card <= 8 ) { result += ( Card + 2 )+"-ку " +lear[ 2 ]; resultchat += ( Card + 2 )+" " +Color( COLOR_GRAY )+lear[ 2 ]; }
			else { result += picture[ Card - 9 ] +" "+lear[ 2 ]; resultchat += picturechat[ Card - 9 ] +" "+Color( COLOR_GRAY )+lear[ 2 ]; }
		}
		else if( Card <= 25 )
		{
			if( Card <= 21 ) { result += ( Card - 11 )+"-ку " +lear[ 3 ]; resultchat += ( Card - 11 )+" " +Color( COLOR_GRAY )+lear[ 3 ]; }
			else { result += picture[ Card - 22 ] +" "+lear[ 3 ]; resultchat += picturechat[ Card - 22 ] +" "+Color( COLOR_GRAY )+lear[ 3 ]; }
		}
		else { result += "бесцветного джокера"; resultchat += Color( COLOR_GRAY )+"Бесцветный джокер"; }

		item.Val4 = BitZeroing( item.Val4, Card, 1 );
	}

	cr.Say( SAY_NORM, Color( COLOR_TEXT )+"-" +Color( COLOR_YELLOW )+resultchat +Color( COLOR_TEXT )+" -" );
	cr.Say( SAY_EMOTE_ON_HEAD, emote + result );
}
void CardsAdjustment( Critter& cr, Item& targetItem )
{
	cr.ParamBase[ TARGETID ] = targetItem.Id;

	string PickUp = FLAG( targetItem.Flags, ITEM_CAN_PICKUP ) ? "Поднимаемые" : "Настольные";
	string[] list = { "Тасовать", PickUp, "*Крап*" };
	MenuMaker( cr, list, "Что делать с картами?", "CardsModification" );
}
void CardsModification( Critter& cr, uint answerI, string& answerS )
{
	if( answerI == 0 )
	{
		Item @ ItemCards = GetItem( cr.Param[ TARGETID ] );
		ItemCards.Val3 = 134217727;
		ItemCards.Val4 = 134217727;
		cr.Action( ACTION_PICK_CRITTER, 3, null );
		cr.Say( SAY_EMOTE, "Тасует карты" );
		return;
	}
	if( answerI == 1 )
	{
		Item @ ItemCards = GetItem( cr.Param[ TARGETID ] );
		FLAG( ItemCards.Flags, ITEM_CAN_PICKUP ) ? UNSETFLAG( ItemCards.Flags, ITEM_CAN_PICKUP ) : SETFLAG( ItemCards.Flags, ITEM_CAN_PICKUP );
		CardsAdjustment( cr, ItemCards );
		return;
	}
	if( answerI == 2 )
	{
		cr.Say( SAY_NETMSG, "Кому-то расхотелось этим заниматься." );
	}
}


